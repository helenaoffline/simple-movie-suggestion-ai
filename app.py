import streamlit as st
import google.generativeai as genai
import re 

#COnfigura Gemini
api_keys =  st.secrets("API_KEY")
genai.configure(api_key=api_keys)
model = genai.GenerativeModel("gemini-2.0-flash")

#Passa intru√ß√µes para o Gemini
def get_movie_suggestions(user_input):
    """
    Gera sugest√µes de filmes com base na entrada do usu√°rio usando o modelo Gemini.
    O prompt √© projetado para encorajar uma sa√≠da estruturada para facilitar a an√°lise.
    """
    prompt = f"""Sugira at√© 3 filmes com base na seguinte descri√ß√£o ou prefer√™ncia: '{user_input}'.
    Para cada filme, forne√ßa o T√≠tulo, G√™nero e um Resumo.
    Formate cada sugest√£o exatamente como no exemplo abaixo, usando marcadores claros.
    Certifique-se de que cada se√ß√£o (T√≠tulo, G√™nero, Resumo) comece com o marcador correspondente.

    T√≠tulo: [Nome do Filme]
    G√™nero: [G√™nero do Filme]
    Resumo: [Breve Resumo do Filme]
    ---
    """
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"Erro ao gerar sugest√µes de filmes: {str(e)}"

#Interface
#T√≠tulo da aba
st.set_page_config(page_title="IA de Sugest√£o de Filmes", page_icon="üé¨")

#T√≠tulo da p√°gina
st.title("IA de Sugest√£o de Filmes")
# Descri√ß√£o da aplica√ß√£o
st.markdown("""
    Em d√∫vida de qual filme assistir!
    Pe√ßa uma sugest√£o a IA de sugest√£o de filmes integrada gemini!
""")

# Instru√ß√£o para o usu√°rio
user_preference = st.text_area(
    "Descreva o tipo de filme que voc√™ gostaria de assistir:",
    placeholder="Exemplo: Filmes do Romance",
    height=100
)

#Inicia a busca
if st.button("Buscar"):
    # Verifica se o usu√°rio forneceu uma descri√ß√£o
    if user_preference:
            #Busca sugest√µes de filmes
            raw_suggestions_text = get_movie_suggestions(user_preference)

            if "Erro" in raw_suggestions_text:
                st.error(raw_suggestions_text)
            else:
                st.subheader("Aqui est√£o algumas sugest√µes para voc√™:")

                # Divide as sugest√µes usando o delimitador "---"
                # Filtra quaisquer strings vazias que possam resultar da divis√£o
                individual_suggestions = [s.strip() for s in raw_suggestions_text.split("---") if s.strip()]
                
                # Verifica se a IA retornou sugest√µes
                if not individual_suggestions:
                    st.warning("N√£o foi poss√≠vel encontrar sugest√µes de filmes com base na sua descri√ß√£o. Tente ser mais espec√≠fico!")

                for suggestion_block in individual_suggestions:
                    # Exibe cada sugest√£o em uma caixinha separado
                    with st.container(border=True):
                        # Coloca o T√≠tulo, G√™nero e Resumo em seus devidos campos
                        title_match = re.search(r"T√≠tulo:\s*(.*)", suggestion_block, re.IGNORECASE)
                        genre_match = re.search(r"G√™nero:\s*(.*)", suggestion_block, re.IGNORECASE)
                        summary_match = re.search(r"Resumo:\s*(.*)", suggestion_block, re.IGNORECASE | re.DOTALL)

                        title = title_match.group(1).strip()
                        genre = genre_match.group(1).strip()
                        summary = summary_match.group(1).strip()

                        st.markdown(f"**T√≠tulo:** {title}")
                        st.markdown(f"**G√™nero:** {genre}")
                        st.markdown(f"**Resumo:** {summary}")
